(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{262:function(t,s,a){t.exports=a.p+"assets/img/BST-1.6926e58e.png"},263:function(t,s,a){t.exports=a.p+"assets/img/BST-2.7e49ce9a.png"},264:function(t,s,a){t.exports=a.p+"assets/img/AVL-tree.c60f0fcd.png"},265:function(t,s,a){t.exports=a.p+"assets/img/max-heap-binary-tree.3bcdeb1a.png"},266:function(t,s,a){t.exports=a.p+"assets/img/min-heap-binary-tree.ae387115.png"},267:function(t,s,a){t.exports=a.p+"assets/img/java-map-interface.ea6b2a08.png"},268:function(t,s,a){t.exports=a.p+"assets/img/Hash_table.e1e71eb6.svg"},287:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"chapter05-자료구조"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#chapter05-자료구조","aria-hidden":"true"}},[t._v("#")]),t._v(" CHAPTER05. 자료구조")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#개요"}},[t._v("개요")])]),n("li",[n("a",{attrs:{href:"#리스트"}},[t._v("리스트")]),n("ul",[n("li",[n("a",{attrs:{href:"#리스트란"}},[t._v("리스트란")])])])]),n("li",[n("a",{attrs:{href:"#배열과-리스트의-관계"}},[t._v("배열과 리스트의 관계")]),n("ul",[n("li",[n("a",{attrs:{href:"#배열"}},[t._v("배열")])]),n("li",[n("a",{attrs:{href:"#리스트와의-관계"}},[t._v("리스트와의 관계")])]),n("li",[n("a",{attrs:{href:"#q7-queue와-deque은-무엇인가"}},[t._v("Q7. Queue와 DEQUE은 무엇인가")])])])]),n("li",[n("a",{attrs:{href:"#트리"}},[t._v("트리")]),n("ul",[n("li",[n("a",{attrs:{href:"#그래프"}},[t._v("그래프")])]),n("li",[n("a",{attrs:{href:"#그래프와-트리의-차이"}},[t._v("그래프와 트리의 차이")])]),n("li",[n("a",{attrs:{href:"#트리-관련-용어"}},[t._v("트리 관련 용어")])]),n("li",[n("a",{attrs:{href:"#이진-검색-트리-binary-search-tree"}},[t._v("이진 검색 트리 (binary search tree)")])]),n("li",[n("a",{attrs:{href:"#avl트리"}},[t._v("AVL트리")])]),n("li",[n("a",{attrs:{href:"#이진-힙"}},[t._v("이진 힙")])])])]),n("li",[n("a",{attrs:{href:"#맵"}},[t._v("맵")]),n("ul",[n("li",[n("a",{attrs:{href:"#해시-해시함수-해시-테이블"}},[t._v("해시, 해시함수, 해시 테이블")])]),n("li",[n("a",{attrs:{href:"#자바의-hashcode"}},[t._v("자바의 HashCode")])]),n("li",[n("a",{attrs:{href:"#해시맵-hashmap"}},[t._v("해시맵(HashMap)")])]),n("li",[n("a",{attrs:{href:"#트리맵-treemap"}},[t._v("트리맵(TreeMap)")])])])]),n("li",[n("a",{attrs:{href:"#링크드해쉬맵-linkedhashmap"}},[t._v("링크드해쉬맵(LinkedHashMap)")])]),n("li",[n("a",{attrs:{href:"#집합-set"}},[t._v("집합(Set)")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"개요"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#개요","aria-hidden":"true"}},[t._v("#")]),t._v(" 개요")]),t._v(" "),n("ul",[n("li",[t._v("JAVA의 자료구조 모음 Collection API")]),t._v(" "),n("li",[t._v("1.2에서 추가되었고 Josh Bloch, Neal Gafter 작성")]),t._v(" "),n("li",[t._v("JAVA의 컬렉션 API 구현체 목록")])]),t._v(" "),n("ol",[n("li",[t._v("Set")]),t._v(" "),n("li",[t._v("List")]),t._v(" "),n("li",[t._v("Map")]),t._v(" "),n("li",[t._v("SortedSet")]),t._v(" "),n("li",[t._v("SortedMap")]),t._v(" "),n("li",[t._v("HashSet")]),t._v(" "),n("li",[t._v("TreeSet")]),t._v(" "),n("li",[t._v("ArrayList")]),t._v(" "),n("li",[t._v("LinkedList")]),t._v(" "),n("li",[t._v("Vector")]),t._v(" "),n("li",[t._v("Collections")]),t._v(" "),n("li",[t._v("Arrays")]),t._v(" "),n("li",[t._v("AbstractCollection")])]),t._v(" "),n("h2",{attrs:{id:"리스트"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#리스트","aria-hidden":"true"}},[t._v("#")]),t._v(" 리스트")]),t._v(" "),n("h3",{attrs:{id:"리스트란"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#리스트란","aria-hidden":"true"}},[t._v("#")]),t._v(" 리스트란")]),t._v(" "),n("ul",[n("li",[t._v("특정 타입 값들이 순차적으로 정렬된 컬렉션")]),t._v(" "),n("li",[t._v("대표적인 리스트구현체로는 ArrayList, LinkedList, Vector가 있음")]),t._v(" "),n("li",[t._v("Vector는 Collection API 등장 전에 만들어진 ArrayList와 동일한 기능을 하는 클래스, 현재는 완전히 Collection 소속으로 포팅되었음.")]),t._v(" "),n("li",[t._v("대표적인 차이점으로 Vector는 Thread Safe하다.")]),t._v(" "),n("li",[t._v("Thread Safe가 필요하면 지금은 Concurrent API에 CopyOnWriteArrayList 를 사용하고 Vector는 제거하면된다.")]),t._v(" "),n("li",[t._v("과거에 작성된 JAVA 와의 호환성을 위해 남겨놨을뿐")])]),t._v(" "),n("h2",{attrs:{id:"배열과-리스트의-관계"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#배열과-리스트의-관계","aria-hidden":"true"}},[t._v("#")]),t._v(" 배열과 리스트의 관계")]),t._v(" "),n("h3",{attrs:{id:"배열"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#배열","aria-hidden":"true"}},[t._v("#")]),t._v(" 배열")]),t._v(" "),n("ul",[n("li",[t._v("배열은 대괄호를 이용하는 타입으로 구성된다")]),t._v(" "),n("li",[t._v("자바 배열 타입과 정의 방법")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayDefinitions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" integers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//명시적 크기지정")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bools "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TRUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FALSE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TRUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FALSE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 암시적 크기지정")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" strings "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"to"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" randomArrayLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//계산값이용 지정")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("생성시 반드시 크기를 알아야 하며, 원소 추가 시 배열 크기를 늘려야함")]),t._v(" "),n("li",[t._v("원소 추가 시 더 큰 배열을 새로 만들고 모든 원소를 신규 배열로 새로 할당한 뒤 새로운 배열이 원본 배열의 주소를 가리키도록 재할당해야함")]),t._v(" "),n("li",[t._v("배열 크기 확장 예제")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" integers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" newIntegersArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newIntegersArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    integers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newIntegersArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newIntegersArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" testArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    testArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    integers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" testArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"리스트와의-관계"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#리스트와의-관계","aria-hidden":"true"}},[t._v("#")]),t._v(" 리스트와의 관계")]),t._v(" "),n("h4",{attrs:{id:"arraylist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist","aria-hidden":"true"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),n("ul",[n("li",[t._v("ArrayList 클래스는 리스트의 데이터로 배열을 사용하는 List 구현체")]),t._v(" "),n("li",[t._v("ArrayList는 배열의 초기 크기 지정이 가능하며, 디폴트는 10이다.")]),t._v(" "),n("li",[t._v("순수 배열 이용시보다 시간과 메모리를 더 사용하므로 초기 크기를 크게 잡는 것이 좋음")]),t._v(" "),n("li",[t._v("원소를 배열에 저장하기 때문에 값을 자주 참조해야하는 경우 사용하는 것이 좋고, 원소 삽입/삭제가 빈번하다면 비추")])]),t._v(" "),n("h4",{attrs:{id:"linkedlist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist","aria-hidden":"true"}},[t._v("#")]),t._v(" LinkedList")]),t._v(" "),n("ul",[n("li",[t._v("LinkedList 클래스는 원소로 내부객체를 사용하는 List 구현체")]),t._v(" "),n("li",[t._v("LinkedList는 element의 첫부분인 head만 참조하고, Element는 리스트의 다음 원소를 가리키는 next필드를 참조.")]),t._v(" "),n("li",[t._v("원소 삽입/삭제 시 next필드만 수정하면되기때문에 비용이 적다.")]),t._v(" "),n("li",[t._v("하지만 Array처럼 랜덤access가 불가하기때문에 참조가 많은 경우 비추")]),t._v(" "),n("li",[t._v("따라서 stack 구현시 좋음")])]),t._v(" "),n("h3",{attrs:{id:"q7-queue와-deque은-무엇인가"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#q7-queue와-deque은-무엇인가","aria-hidden":"true"}},[t._v("#")]),t._v(" Q7. Queue와 DEQUE은 무엇인가")]),t._v(" "),n("ul",[n("li",[t._v("queue는 FIFO 를 구현한 자바 인터페이스, Collecntion API 소속")]),t._v(" "),n("li",[t._v("새 원소 추가 add, 오래된 원소 제거 remove, 가장오래된원소를 제거하지만 삭제하지 않는 peek")]),t._v(" "),n("li",[t._v("remove와 동일한데, 원소가 없을경우 null을 리턴하는 poll mehtod도 있음. remove는 java.util.NoSuchElementException 던짐")]),t._v(" "),n("li",[t._v("Queue 구현체")])]),t._v(" "),n("ol",[n("li",[t._v("LinkedList")]),t._v(" "),n("li",[t._v("PriorityQueue")]),t._v(" "),n("li",[t._v("LinkedBlockingQueue")]),t._v(" "),n("li",[t._v("BlockingQueue")]),t._v(" "),n("li",[t._v("ArrayBlockingQueue")]),t._v(" "),n("li",[t._v("LinkedBlockingQueue")]),t._v(" "),n("li",[t._v("PriorityBlockingQueue")])]),t._v(" "),n("ul",[n("li",[t._v("Queue사용 예제")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueTest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertEquals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"트리"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#트리","aria-hidden":"true"}},[t._v("#")]),t._v(" 트리")]),t._v(" "),n("h3",{attrs:{id:"그래프"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#그래프","aria-hidden":"true"}},[t._v("#")]),t._v(" 그래프")]),t._v(" "),n("p",[t._v("개념 : 노드(N, Node)와 간선(E, Edge)을 하나로 모아놓은 자료 구조")]),t._v(" "),n("ul",[n("li",[t._v("연결 되어 있는 객체 간의 관계를 표현할 수 있는 자료구조\n"),n("ul",[n("li",[t._v("ex) 지도, 지하철 노선도 최단경로, 도로 등")])])]),t._v(" "),n("li",[t._v("그래프는 여러개의 고립 부분 그래프(Isolated Subgraphs)로 구성가능")])]),t._v(" "),n("h3",{attrs:{id:"그래프와-트리의-차이"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#그래프와-트리의-차이","aria-hidden":"true"}},[t._v("#")]),t._v(" 그래프와 트리의 차이")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}}),t._v(" "),n("th",[t._v("그래프")]),t._v(" "),n("th",[t._v("트리")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("정의")]),t._v(" "),n("td",[t._v("노드와 엣지를 하나로 모아 놓은 자료구조")]),t._v(" "),n("td",[t._v("그래프의 한종류, 방향성이 있는 비순환 그래프의 한종류(DAG, DirectedAcyclic Graph)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("방향성")]),t._v(" "),n("td",[t._v("방향그래프(Directed), 무방향그래프(Undirected)")]),t._v(" "),n("td",[t._v("방향그래프(Directed Graph)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("사이클")]),t._v(" "),n("td",[t._v("Cycle, self-loop, Cyclic, Acyclic")]),t._v(" "),n("td",[t._v("Acyclic Graph")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("루트노드")]),t._v(" "),n("td",[t._v("루트 개념없음")]),t._v(" "),n("td",[t._v("한개의 루트노드만 존재")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("부모-자식")]),t._v(" "),n("td",[t._v("부모-자식 개념없음")]),t._v(" "),n("td",[t._v("부모-자식 관계, 모든 자식은 한개의 부모노드만 있음, Top-Bottom or Bottom-Top")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("모델")]),t._v(" "),n("td",[t._v("네트워크 모델")]),t._v(" "),n("td",[t._v("계층 모델")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("순회")]),t._v(" "),n("td",[t._v("DFS,BFS")]),t._v(" "),n("td",[t._v("DFS,BFS의 Pre-,In-,Post-order")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Edge수")]),t._v(" "),n("td",[t._v("그래프의 따라 Edge수다름, 없을수도있음")]),t._v(" "),n("td",[t._v("노드가 N인트리는 항상 N-1의 Edge")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("경로")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("임의의 두 노드 간의 경로는 유일")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("예시")]),t._v(" "),n("td",[t._v("지도,도로,파일시스템 등")]),t._v(" "),n("td",[t._v("이진트리,이진탐색트리,균형트리(AVL, red-black), 이진힙(최대,최소) 등")])])])]),t._v(" "),n("h3",{attrs:{id:"트리-관련-용어"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#트리-관련-용어","aria-hidden":"true"}},[t._v("#")]),t._v(" 트리 관련 용어")]),t._v(" "),n("p",[t._v("Root(뿌리) 노드 - 최상위 노드")]),t._v(" "),n("p",[t._v("Child(자식) 노드 - 어떤 노드의 하위 노드")]),t._v(" "),n("p",[t._v("Parent(부모) 노드 - 어떤 노드의 상위 노드")]),t._v(" "),n("p",[t._v("Brother,Sibling(형제) 노드 - 어떤 노드의 같은 등급의 노드")]),t._v(" "),n("p",[t._v("Leaf(잎) 노드 - 자식 노드가 존재하지 않는 노드")]),t._v(" "),n("p",[t._v("Branch(가지) 노드 - 자식 노드가 하나라도 존재하는 노드중에 Root가 아닌 노드")]),t._v(" "),n("p",[t._v("깊이(Depth) - 루트에서 어떤 노드까지의 경로의 갯수")]),t._v(" "),n("p",[t._v("레벨(Level) - 같은 깊이의 집합")]),t._v(" "),n("p",[t._v("높이(Height) - 이 트리에서 가장 높은 깊이")]),t._v(" "),n("p",[t._v("차수(Degree) - 어떠한 노드의 자식의 갯수")]),t._v(" "),n("h3",{attrs:{id:"이진-검색-트리-binary-search-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#이진-검색-트리-binary-search-tree","aria-hidden":"true"}},[t._v("#")]),t._v(" 이진 검색 트리 (binary search tree)")]),t._v(" "),n("ul",[n("li",[t._v("이진 트리의 구현 중 하나")]),t._v(" "),n("li",[t._v("언제나 이진탐색을 하고 있는 트리라고 생각하면 됨")]),t._v(" "),n("li",[t._v("작으면 왼쪽 크면 오른쪽을 모든 루트에 걸쳐서 실행하는 트리")]),t._v(" "),n("li",[t._v("이진 검색 트리는 주어진 노드보다 값이 작으면 왼쪽, 크면 오른쪽")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(262),alt:"이진검색트리예시"}}),n("br"),t._v("\n참조사이트 : https://www.cs.usfca.edu/~galles/visualization/BST.html")]),t._v(" "),n("ul",[n("li",[t._v("순서대로 1,2,3,4,5를 tree에 insert하면 아래와 같은 트리가 나올 수 있음")]),t._v(" "),n("li",[t._v("이러면 탐색 시 끝까지 찾아야하기 때문에 균형 이진트리를 사용함\n"),n("img",{attrs:{src:a(263),alt:"불균형트리예시"}})])]),t._v(" "),n("h3",{attrs:{id:"avl트리"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#avl트리","aria-hidden":"true"}},[t._v("#")]),t._v(" AVL트리")]),t._v(" "),n("ul",[n("li",[t._v("AVL(Adelson-Velskii and Landis's Tree) 는 어떤 노드든 자식과 깊이 차이가 1을 넘지 않도록 만드는 트리")]),t._v(" "),n("li",[t._v("삽입/삭제 시에 트리의 균형을 항상 유지 하기 때문에 검색 시 효율성이 보장됨")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(264),alt:"불균형트리예시"}})]),t._v(" "),n("h3",{attrs:{id:"이진-힙"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#이진-힙","aria-hidden":"true"}},[t._v("#")]),t._v(" 이진 힙")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("힙 자료구조 자체가 트리의 일종이면서 특성을 가진 트리")])]),t._v(" "),n("li",[n("p",[t._v("최대힙, 최소힙이 있음, 최대힙은 완전 트리이면서 Root가 모든 경우에 자식들보다 커야하는 힙이고 최소는 작아야 하는 힙")])]),t._v(" "),n("li",[n("p",[t._v("가장 크거나, 작은 값을 찾아야하는 우선순위 큐를 만들때 주로 사용됨")])]),t._v(" "),n("li",[n("p",[t._v("최대힙\n"),n("img",{attrs:{src:a(265),alt:"MaxHeapBinaryTree"}})])]),t._v(" "),n("li",[n("p",[t._v("최소힙\n"),n("img",{attrs:{src:a(266),alt:"MinHeapBinaryTree"}})])])]),t._v(" "),n("h2",{attrs:{id:"맵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#맵","aria-hidden":"true"}},[t._v("#")]),t._v(" 맵")]),t._v(" "),n("ul",[n("li",[t._v("hash 함수 개념을 구현하는 구현체")]),t._v(" "),n("li",[t._v("Vector class처럼 1.0에 hashtable구현체가 있었고 1.2에서 Collection API에 HashMap이 등장")]),t._v(" "),n("li",[t._v("Vector와 마찬가지로 hashtable은 ThreadSafe하게 구현됨")]),t._v(" "),n("li",[t._v("이제는 jdk 1.5부터 등장한 ConcurrentHashMap을 사용하는 것을 추천함")]),t._v(" "),n("li",[t._v("java Map은 Map interface를 이용해 구현하고, Collection API의 일부지만, Collection 구현체는 아님")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(267),alt:"java-map-interface"}})]),t._v(" "),n("h3",{attrs:{id:"해시-해시함수-해시-테이블"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#해시-해시함수-해시-테이블","aria-hidden":"true"}},[t._v("#")]),t._v(" 해시, 해시함수, 해시 테이블")]),t._v(" "),n("ul",[n("li",[t._v("해시 함수(hash function)은 데이터의 효율적 관리를 목적으로 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수")]),t._v(" "),n("li",[t._v("이때 매핑 전 원래 데이터의 값을 키(Key), 매핑 후 데이터의 값을 (hash value), 매핑 과정을 해싱(hashing)이라 한다.")]),t._v(" "),n("li",[t._v("보통 해쉬값의 개수보다 많은 키값을 해쉬값으로 변환 하기 때문에 해쉬 함수가 서로다른 두개의 키에 대해 동일한 값을 나타내는 해시충돌(collision)이 발생함.")]),t._v(" "),n("li",[t._v("해시 함수를 사용해 키를 해시로 매핑하고, 이 해쉬 값을 index로 데이터의 값을 키와 함께 저장하는 자료구조가 해시 테이블")]),t._v(" "),n("li",[t._v("해쉬테이블")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(268),alt:"hashtable"}})]),t._v(" "),n("ul",[n("li",[t._v("너무 자세한 내용은.. 별도 자료구조 카테고리에서 정리예정")])]),t._v(" "),n("h3",{attrs:{id:"자바의-hashcode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#자바의-hashcode","aria-hidden":"true"}},[t._v("#")]),t._v(" 자바의 HashCode")]),t._v(" "),n("ul",[n("li",[t._v("java는 해쉬테이블 개념을 이용해 객체 비교를 하기 때문에 Object 클래스에 hashCode 메소드가 정의되어 있음")]),t._v(" "),n("li",[t._v("해쉬코드는 int 타입 값을 반환하며 이 값은 테이블의 어디에 키-값 쌍이 있는지 확인하는데 사용")]),t._v(" "),n("li",[t._v("POJO 생성시, equals와 hashCode를 함께 재정의 하는게 바로 이것 때문")])]),t._v(" "),n("h3",{attrs:{id:"해시맵-hashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#해시맵-hashmap","aria-hidden":"true"}},[t._v("#")]),t._v(" 해시맵(HashMap)")]),t._v(" "),n("ul",[n("li",[t._v("1.0에 있던 Hashtable을 개선해 내놓은 HashMap 클래스는 위에서 설명한 해쉬테이블을 자바로 구현한 것")]),t._v(" "),n("li",[t._v("키-값 쌍을 나타내는 Entry라는 내부 클래스를 이용해 값을 저장")]),t._v(" "),n("li",[t._v("그저 테이블에서 키를 꺼내면 되기때문에 O(1) 이지만 충돌처리 방식에 따라 차이가 있을 수 있음")])]),t._v(" "),n("h3",{attrs:{id:"트리맵-treemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#트리맵-treemap","aria-hidden":"true"}},[t._v("#")]),t._v(" 트리맵(TreeMap)")]),t._v(" "),n("ul",[n("li",[t._v("Map인터페이스 구현 시 이진트리 자료구조를 사용하는 것")]),t._v(" "),n("li",[t._v("트리의 각 노드가 키-값 쌍이 된다")]),t._v(" "),n("li",[t._v("키를 정렬 가능한 순서에 따라 저장하기 때문에 hashCode 메소드는 사용하지 않음")]),t._v(" "),n("li",[t._v("균형을 맞춘 트리 구조라서 O(log N)의 성능이 나옴")])]),t._v(" "),n("h2",{attrs:{id:"링크드해쉬맵-linkedhashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#링크드해쉬맵-linkedhashmap","aria-hidden":"true"}},[t._v("#")]),t._v(" 링크드해쉬맵(LinkedHashMap)")]),t._v(" "),n("ul",[n("li",[t._v("기본적으로 HashMap과 같은 방식으로 동작하기 때문에 O(1)")]),t._v(" "),n("li",[t._v("삽입한 순서가 보장되기 때문에 순서 때문에 사용하는 경우가 있음")]),t._v(" "),n("li",[t._v("해쉬맵과 링크트해쉬맵 차이")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapExample")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" hashMap "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" linkedHashMap "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    hashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    hashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    linkedHashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    linkedHashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    linkedHashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    linkedHashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HashMap"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" hashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Key : "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\tvalue : "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LinkedHashMap"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" linkedHashMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Key : "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\tvalue : "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n    HashMap\n    Key : 1\tvalue : 1\n    Key : 2\tvalue : 2\n    Key : 3\tvalue : 3\n    Key : 4\tvalue : 4\n    LinkedHashMap\n    Key : 4\tvalue : 4\n    Key : 1\tvalue : 1\n    Key : 3\tvalue : 3\n    Key : 2\tvalue : 2\n  */")]),t._v("\n")])])]),n("h2",{attrs:{id:"집합-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#집합-set","aria-hidden":"true"}},[t._v("#")]),t._v(" 집합(Set)")]),t._v(" "),n("ul",[n("li",[t._v("집합은 중복을 허용하지 않는 순서 없는 객체들의 모음")]),t._v(" "),n("li",[t._v("Set 구현체")])]),t._v(" "),n("ol",[n("li",[t._v("List")]),t._v(" "),n("li",[t._v("SortedSet")]),t._v(" "),n("li",[t._v("HashSet")]),t._v(" "),n("li",[t._v("TreeSet")]),t._v(" "),n("li",[t._v("AbstractSet")])]),t._v(" "),n("ul",[n("li",[t._v("집합 예제")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExample")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"welcome"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bye"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertSame")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);